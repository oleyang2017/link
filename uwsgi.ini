[uwsgi]
chdir = /home/workspace/link
wsgi-file = /link/wsgi.py
callable = app

;如果直接暴露给公网当作web服务就用http
http = 0.0.0.0:8000

;TCP/IP socket是进程间的通信
;socket = :4001

;UNIX socket是进程间的通信
;socket = /tmp/we-work-server.sock

;如果用nginx代理那么就用http-socket
;http-websockets = true
;http-socket = :4000

#开启协程
; gevent = 1000
; gevent-monkey-patch = true
; py-autoreload = true


;启动主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程
master = true
#设置socket文件权限,默认666
chmod-socket = 755

pidfile = /tmp/link-iot.pid

;自动给进程命名
auto-procname = true

;为进程指定前缀
procname-prefix-spaced = link-iot

;进程锁避免惊群效应
;thunder-lock = true
cache = true
cache2 = name=mycache,items=100
lazy-apps = true


;进程数量
processes = 2

;开启线程，允许应用启动线程.
enable-threads = true

;线程数量
threads = 32

;一个高阶的cheap模式，在启动的时候只会分配4个工作进程，并使用自适应算法启动新的进程
;cheaper = 4

;在经过3600秒的不活跃状态的进程会被销毁(进入了cheap模式)，并最少保留cheaper指定的进程数
;idle = 3600

;监听的请求队列长度
listen = 2000

;为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）目的是为了防止内存泄漏.
max-requests = 50000

;monitor uwsgi status  通过该端口可以监控 uwsgi 的负载情况
stats = 127.0.0.1:9000

;开启内存使用情况报告
memory-report = true

;每个进程最高虚拟内存限制,单位Mb.
;通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。
;这个配置会限制uWSGI的进程占用虚拟内存不超过n MB。如果虚拟内存已经达到上线，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误。
;limit-as = 8192

#设置工作进程使用虚拟内存超过n MB就回收重启
;reload-on-as = 8192

#设置工作进程使用物理内存超过n MB就回收重启
reload-on-rss = 1024

;一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）
harakiri = 300

;记录超过30000毫秒的请求,输出一条日志
log-slow = 30000

;当一个请求被harakiri杀掉会，会输出一条日志
harakiri-verbose = true

;设置平滑的重启或更新，更新k8s的pod镜像会给父进程发送kill信号（父进程收到信号，直到处理完接收到的请求，如果没有处理完30秒后就会被强行结束）,我这里设置的和harakiri一样。
reload-mercy = 30

; the maximum time (in seconds) a worker can take to reload/shutdown (default is 60)
; worker-reload-mercy = 60

#限制http请求体的大小(Bytes)如果不设置默认4k
#limit-post = 131072

;设置用于uwsgi包解析的内部缓存区大小为128k。如果不设置默认是4k。
buffer-size = 131072
post-buffering = 131072
post-buffering-busize = 65536

ignore-sigpipe = true
ignore-write-errors = true
disable-write-exception = true

wsgi-disable-file-wrapper = true

; 日志格式
logformat = [%(ltime)][%(addr)][%(utid)] "%(method) %(uri)" => %(status) sent %(size) bytes in %(msecs)ms, pod: %(pod), server_cost: %(server_cost)ms, corp: "%(corp_name)" %(corp_id), user: "%(user_name)" %(user_id), api_status: %(api_status) "%(api_status_message)", error_hint: "%(error_hint)"
; 日志文件最大尺寸为 50m，超过之后会生成新的日志文件
log-maxsize = 52428800
; 重启时重新加载日志文件
log-reopen = true
; 采用独立线程处理日志
threaded-logger = true
; 访问日志配置
;req-logger = file:./logs/access.log
; 其他日志配置
;logger = file:./logs/output.log